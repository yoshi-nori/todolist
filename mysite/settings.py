"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


# サービスを提供するドメイン名を制限（ホワイトリスト）
ALLOWED_HOSTS = ['*']


# Application definition
# ここに設定した名前とモデル、マイグレーションファイルがDBに紐づけられて登録されている。
INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'todolist.apps.TodolistConfig', # todolist
    'accounts',                     # authentication
    'django.contrib.sites',         # for django-allauth
    'allauth',                      # for django-allauth
    'allauth.account',              # for django-allauth
    'allauth.socialaccount',        # for django-allauth
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 認証機能（django-allauth） ----------------------------------------------------------
SITE_ID = 1                                                      # プロジェクトの識別値

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',                 # デフォルトの認証基盤（一般ユーザー用（メールアドレス認証））
    'allauth.account.auth_backends.AuthenticationBackend'        # メールアドレスとパスワードの両方を用いて認証するために必要（管理サイト用(ユーザー名認証)）
)
 
# ACCOUNT_AUTHENTICATION_METHOD = 'email'                          # メールアドレス（とパスワード）で認証する
ACCOUNT_AUTHENTICATION_METHOD = 'username'                       # ユーザーネーム（とパスワード）で認証する
ACCOUNT_USERNAME_REQUIRED = True                                 # サインアップ（ユーザー登録）の時にユーザーネームを尋ねる
# ACCOUNT_EMAIL_REQUIRED = True                                    # サインアップ（ユーザー登録）の時にメールアドレスを尋ねる（必須になる）
ACCOUNT_EMAIL_VERIFICATION = 'none'                              # サインアップ時にメール検証を必須とする（mandatory：検証必須、option：検証しなくてもログイン可、none：検証しない）
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1                       # 確認メールの有効期限（日）

ACCOUNT_MAX_EMAIL_ADDRESSES = 2                                  # 同時に登録できるメールアドレスの上限。1だと変更できない（変更機能を実装するにはメールアドレスが2つ必要となるため）
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # ローカルでの開発のためメールをコンソールで表示する

AUTH_USER_MODEL = 'accounts.CustomUser'
LOGIN_URL = 'account_login'                                      # ログインURLの設定
LOGIN_REDIRECT_URL = 'todolist:home'                             # ログイン後のリダイレクト先
ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'                    # ログアウト後のリダイレクト先
ACCOUNT_SIGNUP_REDIRECT_URL = 'account_login'                    # サインアップ後のリダイレクト先

# ACCOUNT_LOGOUT_ON_GET = True                                     # 確認を行わずログアウトする設定

# メール送信を行うための設定
# Gmailサーバーでメール送信を行うには、アプリをOAuthに対応させる必要がある。（Gmail側で安全性の低いアプリへのアクセスを管理しているため）
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'randomemail@gmail.com'
# EMAIL_HOST_PASSWORD = 'password'
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# ACCOUNT_FORMS = {                                                # signupformを指定
#     'signup' : 'testapp.forms.CustomSignupForm',
# }
# ACCOUNT_ADAPTER = 'testapp.adapter.AccountAdapter'               # signupformからの情報をcustomusermodelに保存するのに必要（デフォルトでは保存されない）
#
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False                      # passwordの入力を一回にする
# ------------------------------------------------------------------------------------------------


WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'name',
        'USER': 'user',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        # ユーザー名と似たパスワードならエラーを返す
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # パスワードが指定した長さより短ければエラーを返す
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # よくあるパスワードならエラーを返す
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 数字のみのパスワードならエラーを返す
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

# 多言語化機能を有効にするか否かを指定
USE_I18N = True

# 日付フォーマットなどのローカライゼーション機能を有効にするか否か
USE_L10N = True

# タイムゾーン変換機能を有効にするか否か
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# テンプレートを継承して利用する場合や個別のアプリではなくトップページの静的ファイルを保管する場合，
# プロジェクト直下のstaticファイルを認識するための設定
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 

STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


try:
    from .dev_settings import *
except ImportError:
    pass

if not DEBUG:
    SECRET_KEY = os.environ['SECRET_KEY']
    import django_heroku
    django_heroku.settings(locals())

db_from_env = dj_database_url.config(conn_max_age=600, ssl_require=True)
DATABASES['default'].update(db_from_env)
